// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var Types1 = /* module */Block.localModule([], []);

function deserialize_Types____reference(record) {
  var match = Js_json.classify(record);
  if (typeof match === "number" || match.tag !== 2) {
    return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                  "Expected an object",
                  /* [] */0
                ])]);
  } else {
    var dict = match[0];
    var match$1 = Js_dict.get(dict, "stop");
    if (match$1 !== undefined) {
      var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
      var match$3;
      if (typeof match$2 === "number" || match$2.tag !== 3) {
        match$3 = /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                "Expected an array",
                /* [] */0
              ])]);
      } else {
        var match$4 = match$2[0];
        if (match$4.length !== 2) {
          match$3 = /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                  "Expected an array",
                  /* [] */0
                ])]);
        } else {
          var arg0 = match$4[0];
          var arg1 = match$4[1];
          var match$5 = Js_json.classify(arg1);
          var match$6;
          match$6 = typeof match$5 === "number" || match$5.tag !== 1 ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                    "Expected a float",
                    /* [] */0
                  ])]) : /* Ok */Block.variant("Ok", 0, [match$5[0] | 0]);
          if (match$6.tag) {
            match$3 = /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                    "tuple element 1",
                    match$6[0]
                  ])]);
          } else {
            var match$7 = Js_json.classify(arg0);
            var match$8;
            match$8 = typeof match$7 === "number" || match$7.tag !== 1 ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                      "Expected a float",
                      /* [] */0
                    ])]) : /* Ok */Block.variant("Ok", 0, [match$7[0] | 0]);
            match$3 = match$8.tag ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                      "tuple element 0",
                      match$8[0]
                    ])]) : /* Ok */Block.variant("Ok", 0, [/* tuple */[
                    match$8[0],
                    match$6[0]
                  ]]);
          }
        }
      }
      if (match$3.tag) {
        return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                      "attribute 'stop'",
                      match$3[0]
                    ])]);
      } else {
        var attr_stop = match$3[0];
        var match$9 = Js_dict.get(dict, "start");
        if (match$9 !== undefined) {
          var match$10 = Js_json.classify(Caml_option.valFromOption(match$9));
          var match$11;
          if (typeof match$10 === "number" || match$10.tag !== 3) {
            match$11 = /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                    "Expected an array",
                    /* [] */0
                  ])]);
          } else {
            var match$12 = match$10[0];
            if (match$12.length !== 2) {
              match$11 = /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                      "Expected an array",
                      /* [] */0
                    ])]);
            } else {
              var arg0$1 = match$12[0];
              var arg1$1 = match$12[1];
              var match$13 = Js_json.classify(arg1$1);
              var match$14;
              match$14 = typeof match$13 === "number" || match$13.tag !== 1 ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                        "Expected a float",
                        /* [] */0
                      ])]) : /* Ok */Block.variant("Ok", 0, [match$13[0] | 0]);
              if (match$14.tag) {
                match$11 = /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                        "tuple element 1",
                        match$14[0]
                      ])]);
              } else {
                var match$15 = Js_json.classify(arg0$1);
                var match$16;
                match$16 = typeof match$15 === "number" || match$15.tag !== 1 ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                          "Expected a float",
                          /* [] */0
                        ])]) : /* Ok */Block.variant("Ok", 0, [match$15[0] | 0]);
                match$11 = match$16.tag ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                          "tuple element 0",
                          match$16[0]
                        ])]) : /* Ok */Block.variant("Ok", 0, [/* tuple */[
                        match$16[0],
                        match$14[0]
                      ]]);
              }
            }
          }
          if (match$11.tag) {
            return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                          "attribute 'start'",
                          match$11[0]
                        ])]);
          } else {
            var attr_start = match$11[0];
            var match$17 = Js_dict.get(dict, "uri");
            if (match$17 !== undefined) {
              var match$18 = Js_json.classify(Caml_option.valFromOption(match$17));
              var match$19;
              match$19 = typeof match$18 === "number" || match$18.tag ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                        "expected a string",
                        /* [] */0
                      ])]) : /* Ok */Block.variant("Ok", 0, [match$18[0]]);
              if (match$19.tag) {
                return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                              "attribute 'uri'",
                              match$19[0]
                            ])]);
              } else {
                var attr_uri = match$19[0];
                return /* Ok */Block.variant("Ok", 0, [/* record */Block.record([
                              "uri",
                              "start",
                              "stop"
                            ], [
                              attr_uri,
                              attr_start,
                              attr_stop
                            ])]);
              }
            } else {
              return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                            "No attribute 'uri'",
                            /* [] */0
                          ])]);
            }
          }
        } else {
          return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                        "No attribute 'start'",
                        /* [] */0
                      ])]);
        }
      }
    } else {
      return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                    "No attribute 'stop'",
                    /* [] */0
                  ])]);
    }
  }
}

function serialize_Types____reference(record) {
  var match = record[/* start */1];
  var match$1 = record[/* stop */2];
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "uri",
                record[/* uri */0]
              ],
              /* tuple */[
                "start",
                /* array */[
                  match[0],
                  match[1]
                ]
              ],
              /* tuple */[
                "stop",
                /* array */[
                  match$1[0],
                  match$1[1]
                ]
              ]
            ]);
}

function deserialize_Types__Annotation__t(record) {
  var match = Js_json.classify(record);
  if (typeof match === "number" || match.tag !== 2) {
    return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                  "Expected an object",
                  /* [] */0
                ])]);
  } else {
    var dict = match[0];
    var match$1 = Js_dict.get(dict, "modified");
    if (match$1 !== undefined) {
      var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
      var match$3;
      match$3 = typeof match$2 === "number" || match$2.tag !== 1 ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                "Expected a float",
                /* [] */0
              ])]) : /* Ok */Block.variant("Ok", 0, [match$2[0]]);
      if (match$3.tag) {
        return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                      "attribute 'modified'",
                      match$3[0]
                    ])]);
      } else {
        var attr_modified = match$3[0];
        var match$4 = Js_dict.get(dict, "created");
        if (match$4 !== undefined) {
          var match$5 = Js_json.classify(Caml_option.valFromOption(match$4));
          var match$6;
          match$6 = typeof match$5 === "number" || match$5.tag !== 1 ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                    "Expected a float",
                    /* [] */0
                  ])]) : /* Ok */Block.variant("Ok", 0, [match$5[0]]);
          if (match$6.tag) {
            return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                          "attribute 'created'",
                          match$6[0]
                        ])]);
          } else {
            var attr_created = match$6[0];
            var match$7 = Js_dict.get(dict, "notes");
            if (match$7 !== undefined) {
              var match$8 = Js_json.classify(Caml_option.valFromOption(match$7));
              var match$9;
              match$9 = typeof match$8 === "number" || match$8.tag ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                        "expected a string",
                        /* [] */0
                      ])]) : /* Ok */Block.variant("Ok", 0, [match$8[0]]);
              if (match$9.tag) {
                return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                              "attribute 'notes'",
                              match$9[0]
                            ])]);
              } else {
                var attr_notes = match$9[0];
                var match$10 = Js_dict.get(dict, "references");
                if (match$10 !== undefined) {
                  var match$11 = Js_json.classify(Caml_option.valFromOption(match$10));
                  var match$12;
                  if (typeof match$11 === "number" || match$11.tag !== 3) {
                    match$12 = /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                            "expected an array",
                            /* [] */0
                          ])]);
                  } else {
                    var loop = function (_i, _collected, _items) {
                      while(true) {
                        var items = _items;
                        var collected = _collected;
                        var i = _i;
                        if (items) {
                          var match = deserialize_Types____reference(items[0]);
                          if (match.tag) {
                            return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                          "list element " + String(i),
                                          match[0]
                                        ])]);
                          } else {
                            _items = items[1];
                            _collected = /* :: */Block.simpleVariant("::", [
                                match[0],
                                collected
                              ]);
                            _i = i + 1 | 0;
                            continue ;
                          }
                        } else {
                          return /* Ok */Block.variant("Ok", 0, [Belt_List.reverse(collected)]);
                        }
                      };
                    };
                    match$12 = loop(0, /* [] */0, Belt_List.fromArray(match$11[0]));
                  }
                  if (match$12.tag) {
                    return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                  "attribute 'references'",
                                  match$12[0]
                                ])]);
                  } else {
                    var attr_references = match$12[0];
                    var match$13 = Js_dict.get(dict, "tags");
                    if (match$13 !== undefined) {
                      var match$14 = Js_json.classify(Caml_option.valFromOption(match$13));
                      var match$15;
                      if (typeof match$14 === "number" || match$14.tag !== 3) {
                        match$15 = /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                "expected an array",
                                /* [] */0
                              ])]);
                      } else {
                        var transformer = function (string) {
                          var match = Js_json.classify(string);
                          if (typeof match === "number" || match.tag) {
                            return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                          "expected a string",
                                          /* [] */0
                                        ])]);
                          } else {
                            return /* Ok */Block.variant("Ok", 0, [match[0]]);
                          }
                        };
                        var loop$1 = function (_i, _collected, _items) {
                          while(true) {
                            var items = _items;
                            var collected = _collected;
                            var i = _i;
                            if (items) {
                              var match = transformer(items[0]);
                              if (match.tag) {
                                return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                              "list element " + String(i),
                                              match[0]
                                            ])]);
                              } else {
                                _items = items[1];
                                _collected = /* :: */Block.simpleVariant("::", [
                                    match[0],
                                    collected
                                  ]);
                                _i = i + 1 | 0;
                                continue ;
                              }
                            } else {
                              return /* Ok */Block.variant("Ok", 0, [Belt_List.reverse(collected)]);
                            }
                          };
                        };
                        match$15 = loop$1(0, /* [] */0, Belt_List.fromArray(match$14[0]));
                      }
                      if (match$15.tag) {
                        return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                      "attribute 'tags'",
                                      match$15[0]
                                    ])]);
                      } else {
                        var attr_tags = match$15[0];
                        var match$16 = Js_dict.get(dict, "id");
                        if (match$16 !== undefined) {
                          var match$17 = Js_json.classify(Caml_option.valFromOption(match$16));
                          var match$18;
                          match$18 = typeof match$17 === "number" || match$17.tag ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                    "expected a string",
                                    /* [] */0
                                  ])]) : /* Ok */Block.variant("Ok", 0, [match$17[0]]);
                          if (match$18.tag) {
                            return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                          "attribute 'id'",
                                          match$18[0]
                                        ])]);
                          } else {
                            var attr_id = match$18[0];
                            return /* Ok */Block.variant("Ok", 0, [/* record */Block.record([
                                          "id",
                                          "tags",
                                          "references",
                                          "notes",
                                          "created",
                                          "modified"
                                        ], [
                                          attr_id,
                                          attr_tags,
                                          attr_references,
                                          attr_notes,
                                          attr_created,
                                          attr_modified
                                        ])]);
                          }
                        } else {
                          return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                        "No attribute 'id'",
                                        /* [] */0
                                      ])]);
                        }
                      }
                    } else {
                      return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                    "No attribute 'tags'",
                                    /* [] */0
                                  ])]);
                    }
                  }
                } else {
                  return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                                "No attribute 'references'",
                                /* [] */0
                              ])]);
                }
              }
            } else {
              return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                            "No attribute 'notes'",
                            /* [] */0
                          ])]);
            }
          }
        } else {
          return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                        "No attribute 'created'",
                        /* [] */0
                      ])]);
        }
      }
    } else {
      return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                    "No attribute 'modified'",
                    /* [] */0
                  ])]);
    }
  }
}

function deserialize_Types__Tag__t(record) {
  var match = Js_json.classify(record);
  if (typeof match === "number" || match.tag !== 2) {
    return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                  "Expected an object",
                  /* [] */0
                ])]);
  } else {
    var dict = match[0];
    var match$1 = Js_dict.get(dict, "color");
    if (match$1 !== undefined) {
      var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
      var match$3;
      match$3 = typeof match$2 === "number" || match$2.tag ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                "expected a string",
                /* [] */0
              ])]) : /* Ok */Block.variant("Ok", 0, [match$2[0]]);
      if (match$3.tag) {
        return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                      "attribute 'color'",
                      match$3[0]
                    ])]);
      } else {
        var attr_color = match$3[0];
        var match$4 = Js_dict.get(dict, "name");
        if (match$4 !== undefined) {
          var match$5 = Js_json.classify(Caml_option.valFromOption(match$4));
          var match$6;
          match$6 = typeof match$5 === "number" || match$5.tag ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                    "expected a string",
                    /* [] */0
                  ])]) : /* Ok */Block.variant("Ok", 0, [match$5[0]]);
          if (match$6.tag) {
            return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                          "attribute 'name'",
                          match$6[0]
                        ])]);
          } else {
            var attr_name = match$6[0];
            var match$7 = Js_dict.get(dict, "id");
            if (match$7 !== undefined) {
              var match$8 = Js_json.classify(Caml_option.valFromOption(match$7));
              var match$9;
              match$9 = typeof match$8 === "number" || match$8.tag ? /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                        "expected a string",
                        /* [] */0
                      ])]) : /* Ok */Block.variant("Ok", 0, [match$8[0]]);
              if (match$9.tag) {
                return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                              "attribute 'id'",
                              match$9[0]
                            ])]);
              } else {
                var attr_id = match$9[0];
                return /* Ok */Block.variant("Ok", 0, [/* record */Block.record([
                              "id",
                              "name",
                              "color"
                            ], [
                              attr_id,
                              attr_name,
                              attr_color
                            ])]);
              }
            } else {
              return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                            "No attribute 'id'",
                            /* [] */0
                          ])]);
            }
          }
        } else {
          return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                        "No attribute 'name'",
                        /* [] */0
                      ])]);
        }
      }
    } else {
      return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                    "No attribute 'color'",
                    /* [] */0
                  ])]);
    }
  }
}

function serialize_Types__Annotation__t(record) {
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "id",
                record[/* id */0]
              ],
              /* tuple */[
                "tags",
                Belt_List.toArray(Belt_List.map(record[/* tags */1], (function (prim) {
                            return prim;
                          })))
              ],
              /* tuple */[
                "references",
                Belt_List.toArray(Belt_List.map(record[/* references */2], serialize_Types____reference))
              ],
              /* tuple */[
                "notes",
                record[/* notes */3]
              ],
              /* tuple */[
                "created",
                record[/* created */4]
              ],
              /* tuple */[
                "modified",
                record[/* modified */5]
              ]
            ]);
}

function serialize_Types__Tag__t(record) {
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "id",
                record[/* id */0]
              ],
              /* tuple */[
                "name",
                record[/* name */1]
              ],
              /* tuple */[
                "color",
                record[/* color */2]
              ]
            ]);
}

var Version1 = /* module */Block.localModule([
    "deserialize_Types____reference",
    "deserialize_Types__Annotation__t",
    "deserialize_Types__Tag__t",
    "serialize_Types____reference",
    "serialize_Types__Annotation__t",
    "serialize_Types__Tag__t"
  ], [
    deserialize_Types____reference,
    deserialize_Types__Annotation__t,
    deserialize_Types__Tag__t,
    serialize_Types____reference,
    serialize_Types__Annotation__t,
    serialize_Types__Tag__t
  ]);

function parseVersion(json) {
  var match = Js_json.classify(json);
  if (typeof match === "number") {
    return /* Error */Block.variant("Error", 1, ["Must have a schema version"]);
  } else {
    switch (match.tag | 0) {
      case 2 : 
          var match$1 = Js_dict.get(match[0], "$schemaVersion");
          if (match$1 !== undefined) {
            var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
            if (typeof match$2 === "number" || match$2.tag !== 1) {
              return /* Error */Block.variant("Error", 1, ["Invalid $schemaVersion"]);
            } else {
              return /* Ok */Block.variant("Ok", 0, [/* tuple */[
                          match$2[0] | 0,
                          json
                        ]]);
            }
          } else {
            return /* Error */Block.variant("Error", 1, ["No $schemaVersion present"]);
          }
      case 3 : 
          var match$3 = match[0];
          if (match$3.length !== 2) {
            return /* Error */Block.variant("Error", 1, ["Must have a schema version"]);
          } else {
            var version = match$3[0];
            var payload = match$3[1];
            var match$4 = Js_json.classify(version);
            if (typeof match$4 === "number" || match$4.tag !== 1) {
              return /* Error */Block.variant("Error", 1, ["Invalid wrapped version"]);
            } else {
              return /* Ok */Block.variant("Ok", 0, [/* tuple */[
                          match$4[0] | 0,
                          payload
                        ]]);
            }
          }
      default:
        return /* Error */Block.variant("Error", 1, ["Must have a schema version"]);
    }
  }
}

function wrapWithVersion(version, payload) {
  var match = Js_json.classify(payload);
  if (typeof match === "number") {
    return /* array */[
            version,
            payload
          ];
  } else if (match.tag === 2) {
    var dict = match[0];
    dict["$schemaVersion"] = version;
    return dict;
  } else {
    return /* array */[
            version,
            payload
          ];
  }
}

function serializeAnnotation(data) {
  return wrapWithVersion(1, serialize_Types__Annotation__t(data));
}

function deserializeAnnotation(data) {
  var match = parseVersion(data);
  if (match.tag) {
    return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                  match[0],
                  /* [] */0
                ])]);
  } else {
    var match$1 = match[0];
    var version = match$1[0];
    if (version !== 1) {
      return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                    "Unexpected version " + String(version),
                    /* [] */0
                  ])]);
    } else {
      var match$2 = deserialize_Types__Annotation__t(match$1[1]);
      if (match$2.tag) {
        return /* Error */Block.variant("Error", 1, [match$2[0]]);
      } else {
        return /* Ok */Block.variant("Ok", 0, [match$2[0]]);
      }
    }
  }
}

function serializeTag(data) {
  return wrapWithVersion(1, serialize_Types__Tag__t(data));
}

function deserializeTag(data) {
  var match = parseVersion(data);
  if (match.tag) {
    return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                  match[0],
                  /* [] */0
                ])]);
  } else {
    var match$1 = match[0];
    var version = match$1[0];
    if (version !== 1) {
      return /* Error */Block.variant("Error", 1, [/* :: */Block.simpleVariant("::", [
                    "Unexpected version " + String(version),
                    /* [] */0
                  ])]);
    } else {
      var match$2 = deserialize_Types__Tag__t(match$1[1]);
      if (match$2.tag) {
        return /* Error */Block.variant("Error", 1, [match$2[0]]);
      } else {
        return /* Ok */Block.variant("Ok", 0, [match$2[0]]);
      }
    }
  }
}

var Annotation = /* module */Block.localModule([
    "serialize",
    "deserialize"
  ], [
    serializeAnnotation,
    deserializeAnnotation
  ]);

var Tag = /* module */Block.localModule([
    "serialize",
    "deserialize"
  ], [
    serializeTag,
    deserializeTag
  ]);

var Modules = /* module */Block.localModule([
    "Annotation",
    "Tag"
  ], [
    Annotation,
    Tag
  ]);

var currentVersion = 1;

var Current = 0;

exports.Types1 = Types1;
exports.currentVersion = currentVersion;
exports.Version1 = Version1;
exports.Current = Current;
exports.parseVersion = parseVersion;
exports.wrapWithVersion = wrapWithVersion;
exports.serializeAnnotation = serializeAnnotation;
exports.deserializeAnnotation = deserializeAnnotation;
exports.serializeTag = serializeTag;
exports.deserializeTag = deserializeTag;
exports.Modules = Modules;
/* No side effect */
