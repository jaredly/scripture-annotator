// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function try_(promise, continuation) {
  return promise.catch(Curry.__1(continuation));
}

function let_(promise, continuation) {
  return promise.then(Curry.__1(continuation));
}

function resolve(prim) {
  return Promise.resolve(prim);
}

function reject(prim) {
  return Promise.reject(prim);
}

function map(promise, fn) {
  return promise.then((function (v) {
                return Promise.resolve(Curry._1(fn, v));
              }));
}

function let_$1(promise, cont) {
  return promise.then((function (v) {
                return Promise.resolve(Curry._1(cont, v));
              }));
}

var Wrap = /* module */Block.localModule(["let_"], [let_$1]);

function let_$2(promise, cont) {
  promise.then((function (value) {
          Curry._1(cont, value);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

var Consume = /* module */Block.localModule(["let_"], [let_$2]);

var Async = /* module */Block.localModule([
    "try_",
    "let_",
    "resolve",
    "reject",
    "map",
    "Wrap",
    "Consume"
  ], [
    try_,
    let_,
    resolve,
    reject,
    map,
    Wrap,
    Consume
  ]);

function let_$3(param, continuation) {
  if (param[0]) {
    return Curry._1(continuation, /* () */0);
  } else {
    return param[1];
  }
}

var Guard = /* module */Block.localModule(["let_"], [let_$3]);

function let_$4(param, b) {
  var a = param[0];
  if (a !== undefined) {
    return Curry._1(b, Caml_option.valFromOption(a));
  } else {
    return param[1];
  }
}

function or_(v, $$default) {
  if (v !== undefined) {
    return Caml_option.valFromOption(v);
  } else {
    return $$default;
  }
}

var OptDefault = /* module */Block.localModule([
    "let_",
    "or_"
  ], [
    let_$4,
    or_
  ]);

function let_$5(a, b) {
  if (a !== undefined) {
    return Curry._1(b, Caml_option.valFromOption(a));
  } else {
    return Pervasives.failwith("Unwrapping an empty optional");
  }
}

var OptForce = /* module */Block.localModule(["let_"], [let_$5]);

function let_$6(a, b) {
  if (a.tag) {
    return /* Error */Block.variant("Error", 1, [a[0]]);
  } else {
    return Curry._1(b, a[0]);
  }
}

function map$1(a, b) {
  if (a.tag) {
    return /* Error */Block.variant("Error", 1, [a[0]]);
  } else {
    return /* Ok */Block.variant("Ok", 0, [Curry._1(b, a[0])]);
  }
}

function try_$1(a, b) {
  if (a.tag) {
    return Curry._1(b, a[0]);
  } else {
    return /* Ok */Block.variant("Ok", 0, [a[0]]);
  }
}

function force(t) {
  if (t.tag) {
    console.log(t[0]);
    return Pervasives.failwith("Force unwrapped an Error()");
  } else {
    return t[0];
  }
}

var Try = /* module */Block.localModule([
    "let_",
    "map",
    "flatMap",
    "try_",
    "force"
  ], [
    let_$6,
    map$1,
    let_$6,
    try_$1,
    force
  ]);

var TryWrap = /* module */Block.localModule(["let_"], [map$1]);

function let_$7(a, b) {
  return Curry._1(b, force(a));
}

var TryForce = /* module */Block.localModule(["let_"], [let_$7]);

function let_$8(a, b) {
  if (a.tag) {
    console.log(a[0], (new Error('for the stack')));
    return /* () */0;
  } else {
    return Curry._1(b, a[0]);
  }
}

var TryLog = /* module */Block.localModule(["let_"], [let_$8]);

function let_$9(a, b) {
  if (a !== undefined) {
    return Curry._1(b, Caml_option.valFromOption(a));
  }
  
}

function map$2(a, b) {
  if (a !== undefined) {
    return Caml_option.some(Curry._1(b, Caml_option.valFromOption(a)));
  }
  
}

function force$1(value) {
  if (value !== undefined) {
    return Caml_option.valFromOption(value);
  } else {
    return Pervasives.failwith("Force unwrapped a none");
  }
}

function orError(value, error) {
  if (value !== undefined) {
    return /* Ok */Block.variant("Ok", 0, [Caml_option.valFromOption(value)]);
  } else {
    return /* Error */Block.variant("Error", 1, [error]);
  }
}

var Opt = /* module */Block.localModule([
    "let_",
    "map",
    "force",
    "orError",
    "flatMap"
  ], [
    let_$9,
    map$2,
    force$1,
    orError,
    let_$9
  ]);

function let_$10(a, b) {
  if (a) {
    return Curry._1(b, /* () */0);
  }
  
}

var OptIf = /* module */Block.localModule(["let_"], [let_$10]);

function let_$11(a, b) {
  if (a) {
    return Curry._1(b, /* () */0);
  } else {
    return /* () */0;
  }
}

var UnitIf = /* module */Block.localModule(["let_"], [let_$11]);

function let_$12(a, b) {
  if (a !== undefined) {
    return Caml_option.some(Curry._1(b, Caml_option.valFromOption(a)));
  }
  
}

var OptWrap = /* module */Block.localModule(["let_"], [let_$12]);

function let_$13(a, b) {
  if (a !== undefined) {
    return a;
  } else {
    return Curry._1(b, /* () */0);
  }
}

var OptOr = /* module */Block.localModule(["let_"], [let_$13]);

function let_$14(a, b) {
  if (a !== undefined) {
    return Curry._1(b, Caml_option.valFromOption(a));
  } else {
    return /* () */0;
  }
}

var OptConsume = /* module */Block.localModule(["let_"], [let_$14]);

exports.Async = Async;
exports.Guard = Guard;
exports.OptDefault = OptDefault;
exports.OptForce = OptForce;
exports.Try = Try;
exports.TryWrap = TryWrap;
exports.TryForce = TryForce;
exports.TryLog = TryLog;
exports.Opt = Opt;
exports.OptIf = OptIf;
exports.UnitIf = UnitIf;
exports.OptWrap = OptWrap;
exports.OptOr = OptOr;
exports.OptConsume = OptConsume;
/* No side effect */
